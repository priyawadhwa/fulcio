# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Extract version of Go to use
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | sed -r 's/^.*://g'| uniq)" >> $GITHUB_ENV
      # Setup Go
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVERSION }}
      # Download go-swagger
      - name: download go-swagger
        run : go install github.com/go-swagger/go-swagger/cmd/swagger@v0.27.0
      - name: Validate OpenAPI with Swagger
        run: swagger validate openapi.yaml
      # Make it
      - name: Build
        run: make -C $GITHUB_WORKSPACE all
      # Lint it
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.37.1
      # Test It
      - name: Test
        run: go test -v ./...
      # Gosec It
      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.8.0
        env:
          GOROOT: ""
        with:
          args: ./...
      - name: Ensure no files were modified as a result of the build
        run: git update-index --refresh && git diff-index --quiet HEAD -- || git diff --exit-code
